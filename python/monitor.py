from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import StaleElementReferenceException

import time, json, re
from datetime import datetime, timedelta


def schedule_bid_updates(driver, session_name, config):
    day_counter = 0
    
    while True:
        day_counter += 1
        print(f"\n{'='*60}")
        print(f"üìÖ [{session_name}] –¶–∏–∫–ª #{day_counter} - {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"{'='*60}")
        
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                daily_config = json.load(f)
            
            end_bets_time = datetime.strptime(daily_config['end_bets'], "%H:%M").time()
            increase = daily_config['increase']
            in_a_second = daily_config['in_a_second']
            reload = daily_config['reload']
            
            now = datetime.now()
            end_bets_datetime = datetime.combine(now.date(), end_bets_time)
            
            if now >= end_bets_datetime:
                end_bets_datetime += timedelta(days=1)
                print(f"‚è≠Ô∏è [{session_name}] –í—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            
            update_datetime = end_bets_datetime - timedelta(seconds=in_a_second)
            reload_datetime = end_bets_datetime - timedelta(seconds=reload)
            
            print(f"üìÖ [{session_name}] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {end_bets_datetime.strftime('%d.%m.%Y')}:")
            print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {reload_datetime.strftime('%H:%M:%S')}")
            print(f"   üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫: {update_datetime.strftime('%H:%M:%S')}")
            print(f"   ‚èπÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤: {end_bets_datetime.strftime('%H:%M:%S')}")
            
            # –ë—É–¥–∏–ª—å–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if now < reload_datetime:
                wait_until_time(reload_datetime, session_name, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                print(f"üîÑ [{session_name}] –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É")
                refresh_page_and_get_data(driver, session_name)
            else:
                print(f"‚è© [{session_name}] –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—à–ª–æ")
            
            # –ë—É–¥–∏–ª—å–Ω–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
            if now < update_datetime:
                wait_until_time(update_datetime, session_name, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫")
                print(f"üöÄ [{session_name}] –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏")
                update_all_bids(driver, session_name, increase)
            else:
                print(f"‚è© [{session_name}] –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø—Ä–æ—à–ª–æ")
            
            # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –∂–¥—ë–º –¥–æ –∑–∞–≤—Ç—Ä–∞
            next_day = end_bets_datetime + timedelta(days=1)
            print(f"üí§ [{session_name}] –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è...")
            wait_until_time(next_day, session_name, "—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞")
            
        except Exception as e:
            print(f"‚ùå [{session_name}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            print(f"üïí [{session_name}] –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç...")
            time.sleep(300)  # –ñ–¥—ë–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


def wait_until_time(target_datetime, session_name, action_name):
    while True:
        now = datetime.now()
        time_left = (target_datetime - now).total_seconds()
        
        if time_left <= 0:
            break
            
        if time_left > 3600:  
            hours = int(time_left // 3600)
            minutes = int((time_left % 3600) // 60)
            status = f"‚è≥ [{session_name}] –î–æ {action_name}: {hours}—á {minutes}–º"
        elif time_left > 60:  
            minutes = int(time_left // 60)
            seconds = int(time_left % 60)
            status = f"‚è≥ [{session_name}] –î–æ {action_name}: {minutes}–º {seconds}—Å"
        else: 
            status = f"‚è≥ [{session_name}] –î–æ {action_name}: {int(time_left)}—Å"
        
        print(status + " " * 10, end='\r')
        
        if time_left > 300:  
            sleep_time = 30
        elif time_left > 60:  
            sleep_time = 10
        elif time_left > 10:  
            sleep_time = 1
        else:  
            sleep_time = 0.5
            
        time.sleep(sleep_time)
    
    print(f"üîî [{session_name}] –ë—É–¥–∏–ª—å–Ω–∏–∫ –¥–ª—è {action_name}!" + " " * 30)


def refresh_page_and_get_data(driver, session_name):
    try:
        print(f"üîÉ [{session_name}] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.refresh()
        
        # –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        WebDriverWait(driver, 20).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "table.bid-form__table"))
        )
        
        print(f"‚úÖ [{session_name}] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        time.sleep(2)
        
        doctors = find_list_doctors(driver, session_name)
        print(f"üìä [{session_name}] –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã")
        return doctors
        
    except Exception as e:
        print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return []


def update_all_bids(driver, session_name, increase):
    max_retries = 3
    retry_count = 0
    
    while retry_count < max_retries:
        try:
            print(f"üîç [{session_name}] –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {retry_count + 1}/{max_retries})...")
            doctors = find_list_doctors(driver, session_name)
            updated_count = 0
            
            for doctor in doctors:
                if not doctor['enabled']:
                    print(f"‚è≠Ô∏è [{session_name}] {doctor['name']} –ø—Ä–æ–ø—É—â–µ–Ω (–≤—ã–∫–ª—é—á–µ–Ω)")
                    continue
                    
                try:
                    current_bid = int(doctor['current_bid'])
                    recommended_bid = int(doctor['recommended_bid'])
                    
                    new_bid = recommended_bid + increase
                    
                    bid_input = WebDriverWait(driver, 10).until(
                        EC.element_to_be_clickable((By.CSS_SELECTOR, f"#number-{doctor['id']}"))
                    )
                    
                    bid_input.clear()
                    bid_input.send_keys(str(new_bid))
                    
                    print(f"‚úÖ [{session_name}] {doctor['name']}: {current_bid}—Ä. ‚Üí {new_bid}—Ä. (—Å—Ç–∞—Ç—É—Å: {doctor['status']})")
                    updated_count += 1
                    
                except StaleElementReferenceException:
                    print(f"üîÑ [{session_name}] –≠–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª –¥–ª—è {doctor['name']}, –ø–æ–≤—Ç–æ—Ä—è–µ–º...")
                    continue
                except Exception as e:
                    print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ {doctor['name']}: {e}")
                    continue
            
            if updated_count > 0:
                save_all_changes(driver, session_name)
                print(f"üíæ [{session_name}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {updated_count} —Å—Ç–∞–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π")
                break  
            else:
                print(f"‚ÑπÔ∏è [{session_name}] –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                break
                
        except StaleElementReferenceException:
            retry_count += 1
            print(f"üîÑ [{session_name}] –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–ø—ã—Ç–∫–∞ {retry_count}/{max_retries}")
            if retry_count < max_retries:
                time.sleep(2)
                continue
            else:
                print(f"‚ùå [{session_name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")
                break
        except Exception as e:
            print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫: {e}")
            break


def save_all_changes(driver, session_name):
    max_retries = 3
    
    for retry in range(max_retries):
        try:
            print(f"üíæ [{session_name}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {retry + 1}/{max_retries})...")
            
            save_buttons = WebDriverWait(driver, 10).until(
                EC.presence_of_all_elements_located((By.CSS_SELECTOR, "button.bid-form__btn-doc-save"))
            )
            success_count = 0
            for button in save_buttons:
                try:
                    button.click()
                    time.sleep(0.3) 
                    success_count += 1
                except StaleElementReferenceException:
                    print(f"üîÑ [{session_name}] –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
                    continue
                except Exception as e:
                    print(f"‚ö†Ô∏è [{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                    continue
            
            print(f"‚úÖ [{session_name}] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {success_count}/{len(save_buttons)} —Å—Ç–∞–≤–æ–∫")
            break
            
        except StaleElementReferenceException:
            print(f"üîÑ [{session_name}] –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–≤—Ç–æ—Ä...")
            if retry < max_retries - 1:
                time.sleep(2)
                continue
        except Exception as e:
            print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            break


def find_list_doctors(driver, session_name):
    max_retries = 3
    
    for retry in range(max_retries):
        try:
            print(f"üîç [{session_name}] –ü–æ–∏—Å–∫ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π (–ø–æ–ø—ã—Ç–∫–∞ {retry + 1}/{max_retries})...")
            
            WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "table.bid-form__table"))
            )
            
            doctors = driver.find_elements(By.CSS_SELECTOR, "tr.bid-form__table_full")
            print(f"‚úÖ [{session_name}] –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π: {len(doctors)}")
            
            doctor_data = []
            
            for doctor in doctors:
                try:
                    doctor_id = doctor.get_attribute('id')
                    name = doctor.find_element(By.CSS_SELECTOR, "td:nth-child(1)").text.replace('\n', ' ').strip()
                    specialty = doctor.find_element(By.CSS_SELECTOR, "td:nth-child(2)").text
                    
                    bid_input = doctor.find_element(By.CSS_SELECTOR, "input.bid-form__inp")
                    current_bid = bid_input.get_attribute('value')
                    recommended_bid = bid_input.get_attribute('data-recommend')
                    
                    try:
                        toggle_inner = doctor.find_element(By.CSS_SELECTOR, ".toggle-inner")
                        style = toggle_inner.get_attribute("style")
                        
                        margin_match = re.search(r'margin-left:\s*([-\d]+)px', style)
                        if margin_match:
                            margin_value = int(margin_match.group(1))
                            is_enabled = (margin_value == 0)
                            status = "–≤–∫–ª—é—á–µ–Ω" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
                        else:
                            toggle_off = doctor.find_element(By.CSS_SELECTOR, ".toggle-off")
                            is_enabled = "active" not in toggle_off.get_attribute("class")
                            status = "–≤–∫–ª—é—á–µ–Ω" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
                            
                    except Exception as status_error:
                        print(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è {name}: {status_error}")
                        is_enabled = True
                        status = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                    
                    doctor_data.append({
                        'id': doctor_id,
                        'name': name,
                        'specialty': specialty,
                        'current_bid': current_bid,
                        'recommended_bid': recommended_bid,
                        'status': status,
                        'enabled': is_enabled
                    })
                    
                    print(f"   üë§ {name} - {specialty}")
                    print(f"      üí∞ –°—Ç–∞–≤–∫–∞: {current_bid}—Ä. (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: {recommended_bid}—Ä.)")
                    print(f"      üîò –°—Ç–∞—Ç—É—Å: {status}")
                    
                except StaleElementReferenceException:
                    print(f"   üîÑ –≠–ª–µ–º–µ–Ω—Ç –≤—Ä–∞—á–∞ —É—Å—Ç–∞—Ä–µ–ª, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
                    continue
                except Exception as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞: {e}")
                    continue
            
            return doctor_data
            
        except StaleElementReferenceException:
            print(f"üîÑ [{session_name}] –≠–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —É—Å—Ç–∞—Ä–µ–ª–∏, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            if retry < max_retries - 1:
                time.sleep(2)
                continue
        except Exception as e:
            print(f"‚ùå [{session_name}] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä–∞—á–µ–π: {e}")
    
    return []


def main(driver, session_name="–°–µ—Å—Å–∏—è 1"):
    print(f"üéØ [{session_name}] –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    print(f"üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        schedule_bid_updates(driver, session_name, config=None)
    except KeyboardInterrupt:
        print(f"\nüõë [{session_name}] –†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå [{session_name}] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        print(f"üëã [{session_name}] –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    print("INFO: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ auth.py")