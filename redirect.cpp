#include <iostream>
#include <string>
#include <memory>
#include <chrono>
#include <thread>
#include <stdexcept>

#include <webdriverxx/webdriverxx.h>
#include "monitor.h"

using namespace webdriverxx;
using namespace std;

bool waitAndClick(shared_ptr<WebDriver> driver, const By& by, const string& selector, 
                  int timeout = 20, int retries = 3) {
    for (int attempt = 0; attempt < retries; ++attempt) {
        try {
            auto startTime = chrono::steady_clock::now();
            while (chrono::steady_clock::now() - startTime < chrono::seconds(timeout)) {
                try {
                    auto element = driver->FindElement(by);
                    if (element.IsEnabled() && element.IsDisplayed()) {
                        driver->ExecuteScript("arguments[0].scrollIntoView({block: 'center'});", element);
                        
                        this_thread::sleep_for(chrono::milliseconds(500));
                        
                        element.Click();
                        return true;
                    }
                } catch (const exception&) {
                }
                this_thread::sleep_for(chrono::milliseconds(500));
            }
            
            cout << "‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞, –ø–æ–ø—ã—Ç–∫–∞ " << (attempt + 1) << "/" << retries << endl;
            if (attempt == retries - 1) {
                throw runtime_error("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ " + to_string(retries) + " –ø–æ–ø—ã—Ç–æ–∫");
            }
            this_thread::sleep_for(chrono::seconds(2));
            
        } catch (const exception& e) {
            if (string(e.what()).find("stale element") != string::npos) {
                cout << "üîÑ –≠–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª, –ø–æ–ø—ã—Ç–∫–∞ " << (attempt + 1) << "/" << retries << endl;
                this_thread::sleep_for(chrono::seconds(1));
            } else {
                cout << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ: " << e.what() << ", –ø–æ–ø—ã—Ç–∫–∞ " << (attempt + 1) << "/" << retries << endl;
                if (attempt == retries - 1) {
                    throw;
                }
                this_thread::sleep_for(chrono::seconds(2));
            }
        }
    }
    return false;
}

bool waitForElement(shared_ptr<WebDriver> driver, const By& by, int timeout = 20) {
    auto startTime = chrono::steady_clock::now();
    while (chrono::steady_clock::now() - startTime < chrono::seconds(timeout)) {
        try {
            auto element = driver->FindElement(by);
            if (element.IsDisplayed()) {
                return true;
            }
        } catch (const exception&) {
        }
        this_thread::sleep_for(chrono::milliseconds(500));
    }
    return false;
}

void redirectSession(shared_ptr<WebDriver> driver, bool changeFilial) {
    cout << "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º" << endl;
    
    try {
        waitAndClick(driver, ByXPath("//a[@class='b-button b-button_small b-button_light' and contains(., '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')]"));
        
        if (!waitForElement(driver, ByCss("a[data-qa='placement']"), 20)) {
            throw runtime_error("–≠–ª–µ–º–µ–Ω—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        
        waitAndClick(driver, ByCss("a[data-qa='placement']"));
        
        if (changeFilial) {
            if (!waitForElement(driver, ByCss("select.change_profile_lpu"), 20)) {
                throw runtime_error("Select –¥–ª—è —Å–º–µ–Ω—ã —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }
            
            auto selectElement = driver->FindElement(ByCss("select.change_profile_lpu"));
            selectElement.Click();
            
            if (!waitForElement(driver, ByXPath("//option[@value='101530']"), 20)) {
                throw runtime_error("–û–ø—Ü–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            }
            
            auto optionElement = driver->FindElement(ByXPath("//option[@value='101530']"));
            optionElement.Click();
        }
        
        // –û–∂–∏–¥–∞–µ–º –∏ –∫–ª–∏–∫–∞–µ–º –Ω–∞ "–í—Ä–∞—á–∏"
        if (!waitForElement(driver, ByXPath("//a[text()='–í—Ä–∞—á–∏' and @href='/money/placement/lpu/speciality/']"), 20)) {
            throw runtime_error("–°—Å—ã–ª–∫–∞ '–í—Ä–∞—á–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        }
        
        waitAndClick(driver, ByXPath("//a[text()='–í—Ä–∞—á–∏' and @href='/money/placement/lpu/speciality/']"));
        cout << "üéâ –í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!" << endl;
        
    } catch (const exception& e) {
        cout << "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞: " << e.what() << endl;
        
        try {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
            cout << "üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã..." << endl;
            
            waitAndClick(driver, ByXPath("//a[contains(@href, '/profile/') and contains(., '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')]"));
            waitAndClick(driver, ByXPath("//a[contains(@class, 'v-list-item') and .//div[contains(text(), '–°–ø–µ—Ü—Ä–∞–∑–º–µ—â–µ–Ω–∏–µ')]]"));
            
            if (changeFilial) {
                waitAndClick(driver, ByCss("select.change_profile_lpu"));
                waitAndClick(driver, ByXPath("//option[@value='101530']"));
            }
            
            waitAndClick(driver, ByCss("a[href='/money/placement/lpu/speciality/']"));
            cout << "üéâ –ü–µ—Ä–µ—Ö–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã!" << endl;
            
        } catch (const exception& alt_e) {
            cout << "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " << alt_e.what() << endl;
            throw;
        }
    }

    if (changeFilial) {
        monitorMain(driver, "–°–µ—Å—Å–∏—è 2");
    } else {
        monitorMain(driver, "–°–µ—Å—Å–∏—è 1");
    }
    
}

void mainFunction(shared_ptr<WebDriver> driver) {
    cout << "INFO: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ auth.cpp" << endl;
}

void redirectSession1(shared_ptr<WebDriver> driver) {
    redirectSession(driver, false);
}

void redirectSession2(shared_ptr<WebDriver> driver) {
    redirectSession(driver, true);
}