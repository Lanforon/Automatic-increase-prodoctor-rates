#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <chrono>
#include <thread>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <regex>
#include <stdexcept>
#include <cmath>

#include <webdriverxx/webdriverxx.h>
#include "monitor.h"

using namespace webdriverxx;
using namespace std;
using namespace chrono;

DailyConfig loadDailyConfig(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        throw runtime_error("–§–∞–π–ª " + filename + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }

    string jsonContent((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
    file.close();

    DailyConfig config;
    
    regex endBetsRegex("\"end_bets\"\\s*:\\s*\"([^\"]+)\"");
    regex increaseRegex("\"increase\"\\s*:\\s*(\\d+)");
    regex inASecondRegex("\"in_a_second\"\\s*:\\s*(\\d+)");
    regex reloadRegex("\"reload\"\\s*:\\s*(\\d+)");
    
    smatch matches;
    
    if (regex_search(jsonContent, matches, endBetsRegex) && matches.size() > 1) {
        config.end_bets = matches[1];
    } else {
        throw runtime_error("–ù–µ –Ω–∞–π–¥–µ–Ω end_bets –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
    
    if (regex_search(jsonContent, matches, increaseRegex) && matches.size() > 1) {
        config.increase = stoi(matches[1]);
    } else {
        throw runtime_error("–ù–µ –Ω–∞–π–¥–µ–Ω increase –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
    
    if (regex_search(jsonContent, matches, inASecondRegex) && matches.size() > 1) {
        config.in_a_second = stoi(matches[1]);
    } else {
        throw runtime_error("–ù–µ –Ω–∞–π–¥–µ–Ω in_a_second –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
    
    if (regex_search(jsonContent, matches, reloadRegex) && matches.size() > 1) {
        config.reload = stoi(matches[1]);
    } else {
        throw runtime_error("–ù–µ –Ω–∞–π–¥–µ–Ω reload –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
    }
    
    return config;
}

void waitUntilTime(const system_clock::time_point& target_time, const string& session_name, const string& action_name) {
    while (true) {
        auto now = system_clock::now();
        auto time_left = duration_cast<seconds>(target_time - now).count();
        
        if (time_left <= 0) {
            break;
        }
        
        string status;
        if (time_left > 3600) {
            int hours = time_left / 3600;
            int minutes = (time_left % 3600) / 60;
            status = "‚è≥ [" + session_name + "] –î–æ " + action_name + ": " + to_string(hours) + "—á " + to_string(minutes) + "–º";
        } else if (time_left > 60) {
            int minutes = time_left / 60;
            int seconds = time_left % 60;
            status = "‚è≥ [" + session_name + "] –î–æ " + action_name + ": " + to_string(minutes) + "–º " + to_string(seconds) + "—Å";
        } else {
            status = "‚è≥ [" + session_name + "] –î–æ " + action_name + ": " + to_string(time_left) + "—Å";
        }
        
        cout << status << string(10, ' ') << '\r' << flush;
        
        int sleep_time;
        if (time_left > 300) {
            sleep_time = 30;
        } else if (time_left > 60) {
            sleep_time = 10;
        } else if (time_left > 10) {
            sleep_time = 1;
        } else {
            sleep_time = 0.5;
        }
        
        this_thread::sleep_for(seconds(sleep_time));
    }
    
    cout << "üîî [" + session_name + "] –ë—É–¥–∏–ª—å–Ω–∏–∫ –¥–ª—è " + action_name + "!" + string(30, ' ') << endl;
}

void refreshPageAndGetData(shared_ptr<WebDriver> driver, const string& session_name) {
    try {
        cout << "üîÉ [" << session_name << "] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É..." << endl;
        driver->Refresh();
        
        this_thread::sleep_for(seconds(2));
        
        try {
            driver->FindElement(ByCss("table.bid-form__table"));
            cout << "‚úÖ [" << session_name << "] –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" << endl;
        } catch (const exception&) {
            throw runtime_error("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        }
        
        this_thread::sleep_for(seconds(2));
        
    } catch (const exception& e) {
        cout << "‚ùå [" << session_name << "] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " << e.what() << endl;
    }
}

vector<Doctor> findListDoctors(shared_ptr<WebDriver> driver, const string& session_name) {
    const int max_retries = 3;
    
    for (int retry = 0; retry < max_retries; ++retry) {
        try {
            cout << "üîç [" << session_name << "] –ü–æ–∏—Å–∫ —Å–ø–∏—Å–∫–∞ –≤—Ä–∞—á–µ–π (–ø–æ–ø—ã—Ç–∫–∞ " << (retry + 1) << "/" << max_retries << ")..." << endl;
            
            this_thread::sleep_for(seconds(2));
            
            auto doctors = driver->FindElements(ByCss("tr.bid-form__table_full"));
            cout << "‚úÖ [" << session_name << "] –ù–∞–π–¥–µ–Ω–æ –≤—Ä–∞—á–µ–π: " << doctors.size() << endl;
            
            vector<Doctor> doctor_data;
            
            for (const auto& doctor : doctors) {
                try {
                    Doctor doc;
                    doc.id = doctor.GetAttribute("id");
                    
                    try {
                        auto name_element = doctor.FindElement(ByCss("td:nth-child(1)"));
                        doc.name = name_element.GetText();
                        regex newline_regex("\n");
                        doc.name = regex_replace(doc.name, newline_regex, " ");
                    } catch (const exception&) {
                        doc.name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    }
                    
                    try {
                        auto specialty_element = doctor.FindElement(ByCss("td:nth-child(2)"));
                        doc.specialty = specialty_element.GetText();
                    } catch (const exception&) {
                        doc.specialty = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    }
                    
                    try {
                        auto bid_input = doctor.FindElement(ByCss("input.bid-form__inp"));
                        doc.current_bid = bid_input.GetAttribute("value");
                        doc.recommended_bid = bid_input.GetAttribute("data-recommend");
                    } catch (const exception&) {
                        doc.current_bid = "0";
                        doc.recommended_bid = "0";
                    }
                    
                    try {
                        auto toggle_inner = doctor.FindElement(ByCss(".toggle-inner"));
                        auto style = toggle_inner.GetAttribute("style");
                        
                        regex margin_regex("margin-left:\\s*([-\\d]+)px");
                        smatch matches;
                        
                        if (regex_search(style, matches, margin_regex) && matches.size() > 1) {
                            int margin_value = stoi(matches[1]);
                            doc.enabled = (margin_value == 0);
                            doc.status = doc.enabled ? "–≤–∫–ª—é—á–µ–Ω" : "–≤—ã–∫–ª—é—á–µ–Ω";
                        } else {
                            doc.enabled = true;
                            doc.status = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                        }
                    } catch (const exception&) {
                        doc.enabled = true;
                        doc.status = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω";
                    }
                    
                    doctor_data.push_back(doc);
                    
                    cout << "   üë§ " << doc.name << " - " << doc.specialty << endl;
                    cout << "      üí∞ –°—Ç–∞–≤–∫–∞: " << doc.current_bid << "—Ä. (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ: " << doc.recommended_bid << "—Ä.)" << endl;
                    cout << "      üîò –°—Ç–∞—Ç—É—Å: " << doc.status << endl;
                    
                } catch (const exception& e) {
                    cout << "   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–∞: " << e.what() << endl;
                    continue;
                }
            }
            
            return doctor_data;
            
        } catch (const exception& e) {
            cout << "‚ùå [" << session_name << "] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –≤—Ä–∞—á–µ–π: " << e.what() << endl;
            if (retry < max_retries - 1) {
                this_thread::sleep_for(seconds(2));
                continue;
            }
        }
    }
    
    return vector<Doctor>();
}

void saveAllChanges(shared_ptr<WebDriver> driver, const string& session_name) {
    const int max_retries = 3;
    
    for (int retry = 0; retry < max_retries; ++retry) {
        try {
            cout << "üíæ [" << session_name << "] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–ø–æ–ø—ã—Ç–∫–∞ " << (retry + 1) << "/" << max_retries << ")..." << endl;
            
            auto save_buttons = driver->FindElements(ByCss("button.bid-form__btn-doc-save"));
            int success_count = 0;
            
            for (const auto& button : save_buttons) {
                try {
                    button.Click();
                    this_thread::sleep_for(milliseconds(300));
                    success_count++;
                } catch (const exception& e) {
                    cout << "‚ö†Ô∏è [" << session_name << "] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " << e.what() << endl;
                    continue;
                }
            }
            
            cout << "‚úÖ [" << session_name << "] –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ " << success_count << "/" << save_buttons.size() << " —Å—Ç–∞–≤–æ–∫" << endl;
            break;
            
        } catch (const exception& e) {
            cout << "‚ùå [" << session_name << "] –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: " << e.what() << endl;
            if (retry < max_retries - 1) {
                this_thread::sleep_for(seconds(2));
                continue;
            }
        }
    }
}

void updateAllBids(shared_ptr<WebDriver> driver, const string& session_name, int increase) {
    const int max_retries = 3;
    int retry_count = 0;
    
    while (retry_count < max_retries) {
        try {
            cout << "üîç [" << session_name << "] –ü–æ–∏—Å–∫ –≤—Ä–∞—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ " << (retry_count + 1) << "/" << max_retries << ")..." << endl;
            
            auto doctors = findListDoctors(driver, session_name);
            int updated_count = 0;
            
            for (const auto& doctor : doctors) {
                if (!doctor.enabled) {
                    cout << "‚è≠Ô∏è [" << session_name << "] " << doctor.name << " –ø—Ä–æ–ø—É—â–µ–Ω (–≤—ã–∫–ª—é—á–µ–Ω)" << endl;
                    continue;
                }
                
                try {
                    int current_bid = stoi(doctor.current_bid);
                    int recommended_bid = stoi(doctor.recommended_bid);
                    int new_bid = recommended_bid + increase;
                    
                    auto bid_input = driver->FindElement(ByCss("#number-" + doctor.id));
                    bid_input.Clear();
                    bid_input.SendKeys(to_string(new_bid));
                    
                    cout << "‚úÖ [" << session_name << "] " << doctor.name << ": " << current_bid << "—Ä. ‚Üí " << new_bid << "—Ä. (—Å—Ç–∞—Ç—É—Å: " << doctor.status << ")" << endl;
                    updated_count++;
                    
                } catch (const exception& e) {
                    cout << "‚ùå [" << session_name << "] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ " << doctor.name << ": " << e.what() << endl;
                    continue;
                }
            }
            
            if (updated_count > 0) {
                saveAllChanges(driver, session_name);
                cout << "üíæ [" << session_name << "] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ " << updated_count << " —Å—Ç–∞–≤–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π" << endl;
                break;
            } else {
                cout << "‚ÑπÔ∏è [" << session_name << "] –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è" << endl;
                break;
            }
            
        } catch (const exception& e) {
            cout << "‚ùå [" << session_name << "] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞–≤–æ–∫: " << e.what() << endl;
            retry_count++;
            if (retry_count < max_retries) {
                this_thread::sleep_for(seconds(2));
                continue;
            } else {
                cout << "‚ùå [" << session_name << "] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ " << max_retries << " –ø–æ–ø—ã—Ç–æ–∫" << endl;
                break;
            }
        }
    }
}

void scheduleBidUpdates(shared_ptr<WebDriver> driver, const string& session_name) {
    int day_counter = 0;
    
    while (true) {
        day_counter++;
        cout << "\n" << string(60, '=') << endl;
        cout << "üìÖ [" << session_name << "] –¶–∏–∫–ª #" << day_counter << " - ";
        
        auto now = system_clock::now();
        time_t now_time = system_clock::to_time_t(now);
        cout << put_time(localtime(&now_time), "%d.%m.%Y %H:%M:%S") << endl;
        cout << string(60, '=') << endl;
        
        try {
            auto daily_config = loadDailyConfig("config.json");
            
            tm end_bets_tm = {};
            istringstream ss(daily_config.end_bets);
            ss >> get_time(&end_bets_tm, "%H:%M");
            
            auto today = system_clock::to_time_t(now);
            tm* today_tm = localtime(&today);
            
            end_bets_tm.tm_year = today_tm->tm_year;
            end_bets_tm.tm_mon = today_tm->tm_mon;
            end_bets_tm.tm_mday = today_tm->tm_mday;
            
            auto end_bets_time = system_clock::from_time_t(mktime(&end_bets_tm));
            auto update_time = end_bets_time - seconds(daily_config.in_a_second);
            auto reload_time = end_bets_time - seconds(daily_config.reload);
            
            if (now >= end_bets_time) {
                end_bets_time += hours(24);
                update_time = end_bets_time - seconds(daily_config.in_a_second);
                reload_time = end_bets_time - seconds(daily_config.reload);
                cout << "‚è≠Ô∏è [" << session_name << "] –í—Ä–µ–º—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞" << endl;
            }
            
            cout << "üìÖ [" << session_name << "] –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:" << endl;
            cout << "   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: " << put_time(localtime(&reload_time), "%H:%M:%S") << endl;
            cout << "   üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–æ–∫: " << put_time(localtime(&update_time), "%H:%M:%S") << endl;
            cout << "   ‚èπÔ∏è –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤: " << put_time(localtime(&end_bets_time), "%H:%M:%S") << endl;
            
            if (now < reload_time) {
                waitUntilTime(reload_time, session_name, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã");
                cout << "üîÑ [" << session_name << "] –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É" << endl;
                refreshPageAndGetData(driver, session_name);
            } else {
                cout << "‚è© [" << session_name << "] –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—à–ª–æ" << endl;
            }
            
            if (now < update_time) {
                waitUntilTime(update_time, session_name, "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫");
                cout << "üöÄ [" << session_name << "] –ë—É–¥–∏–ª—å–Ω–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫–∏" << endl;
                updateAllBids(driver, session_name, daily_config.increase);
            } else {
                cout << "‚è© [" << session_name << "] –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫ –ø—Ä–æ—à–ª–æ" << endl;
            }
            
            auto next_day = end_bets_time + hours(24);
            cout << "üí§ [" << session_name << "] –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è..." << endl;
            waitUntilTime(next_day, session_name, "—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞");
            
        } catch (const exception& e) {
            cout << "‚ùå [" << session_name << "] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: " << e.what() << endl;
            cout << "üïí [" << session_name << "] –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç..." << endl;
            this_thread::sleep_for(minutes(5));
        }
    }
}

void mainMonitor(shared_ptr<WebDriver> driver, const string& session_name) {
    cout << "üéØ [" << session_name << "] –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞" << endl;
    cout << "üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C" << endl;
    
    try {
        scheduleBidUpdates(driver, session_name);
    } catch (const exception& e) {
        cout << "‚ùå [" << session_name << "] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " << e.what() << endl;
    }
}

void standaloneMain() {
    cout << "INFO: –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ auth.cpp" << endl;
}